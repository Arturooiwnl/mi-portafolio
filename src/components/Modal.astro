---

interface Props {
  id: string;
  title: string;
}

const { id, title } = Astro.props;
---

<div transition:persist id={id} class="modal h-auto fixed inset-0 z-50 hidden">
  <div class="modal-overlay absolute inset-0 bg-gray-800 dark:bg-black/80 backdrop-blur-sm"></div>

  <div class="modal-container bg-white z-60 dark:bg-slate-900/90 w-11/12 sm:w-full md:max-w-4xl mx-auto rounded-lg h-fit shadow-lg max-h-[90%] my-10 relative overflow-y-auto">
    <div class="modal-header flex justify-between items-center p-4 border-b dark:border-gray-700">
      <div class="flex items-center justify-center">
        <h3 class="text-xl sm:text-2xl font-Chakra bg-gradient-to-r font-bold from-[#7ADBF7] via-[#4AB5E4] to-[#2A6BA9] bg-clip-text text-transparent">
          {title}
        </h3>
      </div>
      <button aria-label="Cerrar Modal" class="modal-close cursor-pointer text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
    <div class="modal-content p-4">
      <slot />
    </div>
  </div>
</div>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const modalTriggers = document.querySelectorAll('[data-modal-target]');
    const modals = document.querySelectorAll('.modal');

    // Abrir modal
    modalTriggers.forEach(trigger => {
      trigger.addEventListener('click', () => {
        const modalId = trigger.getAttribute('data-modal-target');
        const modal = document.getElementById(modalId);
        if (modal) {
          modal.classList.remove('hidden');
          document.body.classList.add('overflow-hidden');
        }
      });
    });

    // Cerrar modal
    modals.forEach(modal => {
      const overlay = modal.querySelector('.modal-overlay');
      const closeBtn = modal.querySelector('.modal-close');

      if (overlay) {
        overlay.addEventListener('click', () => {
          modal.classList.add('hidden');
          document.body.classList.remove('overflow-hidden');
        });
      }

      if (closeBtn) {
        closeBtn.addEventListener('click', () => {
          modal.classList.add('hidden');
          document.body.classList.remove('overflow-hidden');
        });
      }
    });

    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        modals.forEach(modal => {
          if (!modal.classList.contains('hidden')) {
            modal.classList.add('hidden');
            document.body.classList.remove('overflow-hidden');
          }
        });
      }
    });
  });
</script>
