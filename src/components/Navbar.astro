---

import ToggleTheme from "./ToggleTheme.astro";

const NAVIGATIONS = [
  { name: "Inicio", link: "#home", label: "home" },
  { name: "Experiencia", link: "#experiencia", label: "experiencia" },
  { name: "Proyectos", link: "#proyectos", label: "proyectos" },
  { name: "Sobre Mí", link: "#sobre-mi", label: "sobre-mi" },
  { name: "Contacto", link: "mailto:andresperotto71gmail.com", label: "contacto" }
];

---
<header class="relative z-50">
  <nav class="fixed hidden top-0 left-1/2 -translate-x-1/2 bg-slate-950/30 backdrop-blur-md shadow-md px-7 py-3 rounded-b-full md:flex justify-center items-center">
    <ul class="hidden md:flex justify-center items-center gap-10 font-bold text-sm whitespace-nowrap md:text-lg text-gray-800 dark:text-white">
      {
        NAVIGATIONS.map((nav) => (
          <li>
            <a 
            aria-label={nav.label}
            href={nav.link} class=" hover:text-white/60 transition-all duration-300 relative after:absolute after:bottom-[-4px] after:left-0 after:h-[2px] after:w-0 after:bg-white/60 after:transition-all after:duration-300 hover:after:w-full">
              {nav.name}
            </a>
          </li>
        ))
      }
    </ul>
  </nav>
  <div class="fixed top-15 sm:top-15 md:top-5 right-5">
    <ToggleTheme/>
  </div>
  <button
    id="menu-toggle"
    class="fixed md:hidden top-3 right-4 z-50 flex flex-col justify-center items-center size-9 gap-[6px] group"
    aria-label="Abrir menú"
  >
    <span class="bg-gray-800 dark:bg-white w-6 h-[2px] rounded transition-all duration-300 group-[.open]:rotate-45 group-[.open]:translate-y-[8px]"></span>
    <span class="bg-gray-800 dark:bg-white w-6 h-[2px] rounded transition-all duration-300 group-[.open]:opacity-0"></span>
    <span class="bg-gray-800 dark:bg-white w-6 h-[2px] rounded transition-all duration-300 group-[.open]:-rotate-45 group-[.open]:-translate-y-[8px]"></span>
  </button>

  <div id="mobile-menu"
       class="md:hidden fixed top-0 left-1/2 -translate-x-1/2 w-[90vw] max-w-xs max-h-0 overflow-hidden opacity-0 transition-[max-height,opacity] duration-500 ease-in-out hidden rounded-b-2xl bg-gray-300/90 dark:bg-slate-950/90 backdrop-blur-md shadow-lg px-6">
    <ul class="flex flex-col items-center gap-6 py-6 text-gray-800 dark:text-white font-semibold text-lg">
      {
        NAVIGATIONS.map((nav) => (
          <li>
            <a href={nav.link} class="hover:text-white/60 transition-all duration-300 mobile-link">
              {nav.name}
            </a>
          </li>
        ))
      }
    </ul>
  </div>


<script is:inline>
  const toggle = document.getElementById('menu-toggle');
  const menu = document.getElementById('mobile-menu');
  const links = document.querySelectorAll('.mobile-link');

  const openMenu = () => {
    menu.classList.remove('hidden');
    void menu.offsetHeight;
    menu.style.maxHeight = menu.scrollHeight + 'px';
    menu.classList.remove('opacity-0');
    menu.classList.add('opacity-100');
  };

  const closeMenu = () => {
    menu.style.maxHeight = '0px';
    menu.classList.remove('opacity-100');
    menu.classList.add('opacity-0');
    setTimeout(() => {
      menu.classList.add('hidden');
    }, 500); 
  };

  toggle.addEventListener('click', () => {
    const isHidden = menu.classList.contains('hidden');
    if (isHidden || menu.classList.contains('opacity-0')) {
      openMenu();
    } else {
      closeMenu();
    }
    toggle.classList.toggle('open');
  });

  links.forEach(link => {
    link.addEventListener('click', () => {
      closeMenu();
      toggle.classList.remove('open');
    });
  });
</script>

<script is:inline>

  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section")
    const navItems = document.querySelectorAll("header nav a")

    const callback = (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-white/60")
              item.classList.add("after:w-full")
            } else {
              item.classList.remove("text-white/60")
              item.classList.remove("after:w-full")
            }
          })
        }
      })
    }

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    })

    sections.forEach((section) => {
      observer.observe(section)
    })

    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect()
      } else {
        sections.forEach((section) => {
          observer.observe(section)
        })
      }
    }
  })

</script>

</header>
